{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fSubmit","e","preventDefault","console","log","datas","state","name","refs","value","address","act","data","push","setState","index","myForm","reset","fRemove","i","splice","fEdit","title","bind","assertThisInitialized","_this2","react_default","a","createElement","className","ref","type","placeholder","autoFocus","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2df5eca6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      title : \"CRUD Application\",\n      act:0,\n      index : \"\",\n      datas : []\n    }\n    this.fSubmit = this.fSubmit.bind(this);\n    this.fRemove = this.fRemove.bind(this);\n    this.fEdit = this.fEdit.bind(this);\n\n\n  }\n  \n  fSubmit=(e)=>{\n    e.preventDefault();\n    console.log(\"fn call\")\n    let datas = this.state.datas;\n    let name = this.refs.name.value;\n    let address = this.refs.address.value;\n\n    if(this.state.act===0){     //new\n      let data = {\n        name , address\n      }\n      datas.push(data);\n      this.setState({datas:datas});\n    }else{                      //update\n      let index = this.state.index;\n      datas[index].name = name;\n      datas[index].address = address;\n    }\n\n    this.setState({datas:datas,act:0});\n\n    this.refs.myForm.reset();\n    console.log(this.state.datas);\n\n  }\n  fRemove=(i)=>{\n    let datas = this.state.datas;\n    datas.splice(i,1);\n    this.setState({datas});\n    this.refs.myForm.reset();\n  }\n  fEdit=(i)=>{\n    let data = this.state.datas[i];\n    this.refs.name.value = data.name;\n    this.refs.address.value = data.address;\n    this.setState({act:1 , index:i});\n\n  }\n\n  render() {\n    let datas = this.state.datas;\n    return (\n      <div className=\"App\">\n        <h2>{this.state.title}</h2>\n        <form ref=\"myForm\" className=\"myForm\">\n          <input type=\"text\" ref=\"name\" placeholder=\"Your Name\" className=\"formField\" autoFocus/>\n          <input type=\"text\" ref=\"address\" placeholder=\"Your Address\" className=\"formField\"/>\n          <button onClick={(e)=>this.fSubmit(e)} className=\"myButton\">submit</button>\n\n        </form>\n\n      <ul>\n        {console.log(\"datas\",datas)}\n        {datas.map((data,i)=>\n        <li key={i} className=\"myList\">\n          {i+1}.{data.name} , {data.address}\n          <button onClick={()=>this.fRemove(i)} className=\"myListButton\">remove</button>\n          <button onClick={()=>this.fEdit(i)} className=\"myListButton\">edit</button>        \n\n        </li>\n        )}\n      </ul>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}